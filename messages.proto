syntax = "proto2";

package com.cwrubotix.glennifer;

/**
 * Message types from the schemas document
 *
 * Each comment before the message specifies what AMQP queue topics the message is used for.
 */

// Used inside other message only
message UnixTime {
	required uint64 time_int = 1;
	required float time_frac = 2;
}

// sensor.locomotion.front_left.wheel_rpm
// sensor.locomotion.front_right.wheel_rpm
// sensor.locomotion.back_left.wheel_rpm
// sensor.locomotion.back_right.wheel_rpm
// sensor.excavation.bucket_conveyor_rpm
// sensor.deposition.hopper_rpm
message RpmUpdate {
	required float rpm = 1;
	required UnixTime timestamp = 2;
}

// sensor.excavation.bucket_conveyor_translation_displacement
message DisplacementUpdate {
	required float displacement = 1;
	required UnixTime timestamp = 2;
}

// sensor.excavation.arm_pos
// sensor.deposition.dump_pos
message PositionUpdate {
	required float position = 1;
	required UnixTime timestamp = 2;
}

// sensor.excavation.conveyor_current
message CurrentUpdate {
	required float current = 1;
	required UnixTime timestamp = 2;
}

// sensor.excavation.arm_limit_extended
// sensor.excavation.arm_limit_retracted
// sensor.excavation.bucket_conveyor_translation_limit_extended
// sensor.excavation.bucket_conveyor_translation_limit_retracted
// sensor.deposition.dump_limit_extended
// sensor.deposition.dump_limit_retracted
message LimitUpdate {
	required bool pressed = 1;
	required UnixTime timestamp = 2;
}

message ImuUpdate {
	required float orientation = 1;
	required UnixTime timestamp = 2;
}

// sensor.deposition.load.left
// sensor.deposition.load.right
message LoadUpdate {
	required float load = 1;
	required UnixTime timestamp = 2;
}

message Fault {
	required uint32 fault_code = 1;
	required UnixTime timestamp = 2;
	repeated uint32 params = 3;
}

message Adjustment {
	optional Fault source_fault = 1;
	required uint32 adjustment_code = 2;
	required UnixTime timestamp = 3;
	repeated uint32 params = 4;
}

// motorcontrol.locomotion.front_left.wheel_rpm
// motorcontrol.locomotion.front_right.wheel_rpm
// motorcontrol.locomotion.back_left.wheel_rpm
// motorcontrol.locomotion.back_right.wheel_rpm
// motorcontrol.excavation.bucket_conveyor_rpm
// motorcontrol.deposition.conveyor_rpm
// motorcontrol.deposition.vibration_rpm
message SpeedControlCommand {
	required float rpm = 1;
	required float timeout = 2;
}

// motorcontrol.excavation.arm_pos
// motorcontrol.excavation.conveyor_translation_displacement
// motorcontrol.deposition.dump_pos
message PositionControlCommand {
	required float position = 1;
	required float timeout = 2;
}

// motorcontrol.system.stop_all
message StopAllCommand {
	required bool stop = 1;
	required float timeout = 2;
}

// subsyscommand.locomotion.straight
message LocomotionControlCommandStraight {
	required float speed = 1;
	required float timeout = 2;
}

// subsyscommand.locomotion.strafe
message LocomotionControlCommandStrafe {
	required float speed = 1;
	required float timeout = 2;
}

// subsyscommand.locomotion.turn
message LocomotionControlCommandTurn {
	required float speed = 1;
	required float timeout = 2;
}

// subsyscommand.locomotion.configure
message LocomotionControlCommandConfigure {
	enum Configuration {
		STRAIGHT_CONFIG = 1;
		STRAFE_CONFIG = 2;
		TURN_CONFIG = 3;
	}
	required Configuration target = 1;
	required float power = 2;
	required float timeout = 3;
}

// subsyscommand.excavation.dig_deep
message ExcavationControlCommandDigDeep {
	required float depth = 1;
	required float dig_speed = 2;
}

// subsyscommand.excavation.dig_surface
message ExcavationControlCommandDigSurface {
	required float depth = 1;
	required float dig_speed = 2;
	required float dist = 3;
	required float drive_speed = 4;
}

// subsyscommand.excavation.dig_end
message ExcavationControlCommandDigEnd {
}

//state.subscribe
message StateSubscribe {
	required string replyKey = 1;
	required float interval = 2;
	required bool locomotion_summary = 3;
	required bool locomotion_detailed = 4;
	required bool excavation_summary = 5;
	required bool excavation_detailed = 6;
	required bool deposition_summary = 7;
	required bool deposition_detailed = 8;
	optional UnixTime startTime = 9;
}

//state "super message"
message State{
	optional LocomotionStateSummary locSummary = 1;
	optional LocomotionStateDetailed locDetailed = 2;
	optional ExcavationStateSummary excSummary = 3;
	optional ExcavationStateDetailed excDetailed = 4;
	optional DepositionStateSummary depSummary = 5;
	optional DepositionStateDetailed depDetailed = 6;
	required UnixTime timestamp = 7;
}

//summary of locomotion state
message LocomotionStateSummary {
	enum Configuration {
		INTERMEDIATE_CONFIG = 0;
		STRAIGHT_CONFIG = 1;
		STRAFE_CONFIG = 2;
		TURN_CONFIG = 3;
	}
	required Configuration config = 1;
	required float speed = 2;
}

//details of locomotion state. ALL THE VALUES
message LocomotionStateDetailed {
	required float front_left_rpm = 3;
	required float front_right_rpm = 4;
	required float back_left_rpm = 5;
	required float back_right_rpm = 6;
	required float front_left_pos = 7;
	required float front_right_pos = 8;
	required float back_left_pos = 9;
	required float back_right_pos = 10;
	required bool front_left_extended = 11;
	required bool front_right_extended = 12;
	required bool back_left_extended = 13;
	required bool back_right_extended = 14;
	required bool front_left_retracted = 15;
	required bool front_right_retracted = 16;
	required bool back_left_retracted = 17;
	required bool back_right_retracted = 18;
}

//summary of excavation state
message ExcavationStateSummary { 
	required float rpm = 1;
	required float displacement = 2;
	required float arm_pos = 3;
	required bool arm_extended = 4;
	required bool arm_retracted = 5;
	required bool translation_extended = 6;
	required bool translation_retracted = 7;
}

//details of excavation state
message ExcavationStateDetailed {
	required float rpm = 1;
	required float displacement = 2;
	required float arm_pos = 3;
	required bool arm_left_extended = 4;
	required bool arm_right_extended = 5;
	required bool arm_left_retracted = 6;
	required bool arm_right_retracted = 7;
	required bool translation_left_extended = 8;
	required bool translation_right_extended = 9;
	required bool translation_left_retracted = 10;
	required bool translation_right_retracted = 11;
	required float conveyor_motor_current = 12;
}

//summary of deposition state
message DepositionStateSummary { 
	required float pos = 1;
	required float load = 2;
	required bool dump_extended = 3;
	required bool dump_retracted = 4;
}

//details of deposition state
message DepositionStateDetailed {
	required float front_left_load = 2;
	required float front_right_load = 3;
	required float back_left_load = 4;
	required float back_right_load = 5;
	required bool dump_left_extended = 6;
	required bool dump_right_extended = 7;
	required bool dump_left_retracted = 8;
	required bool dump_right_retracted = 9;
}

//localization vector
message	LocalizationPosition {
	required float x_position = 1;
	required float y_position = 2;
	required float bearing_angle = 3;
}

//obstacle detection
message ObstaclePosition {
	required float x_position = 1;
	required float y_position = 2;
	required float z_position = 3;
	required float diameter = 4;
}

// launch.transit
message LaunchTransit {
    required float cur_x_pos = 1;
	required float cur_y_pos = 2;
    required float cur_heading = 3;
	required float dest_x_pos = 4;
	required float dest_y_pos = 5;
	required float time_alloc = 6;
	required UnixTime timestamp = 7;
}

// launch.drill
message LaunchDrill {
	required float current_length = 1;
	required float current_angle = 2;
	required float destination_length = 3;
	required float destination_angle = 4;
	required float load_desired = 5;
	required bool start = 6;
	required float time_allocation = 7;
	required UnixTime timestamp = 8;
}

// launch.dump
message LaunchDump {
	required float current_length = 1;
	required float current_angle = 2;
	required bool start = 3;
	required float time_allocation = 4;
	required UnixTime timestamp = 5;
}

// progress.transit
// progress.drill
// progress.dump
message ProgressReport {
	required bool done = 1;
	required UnixTime timestamp = 2;
}

// error.transit
// error.drill
// error.dump
message ErrorReport {
	required bool resolved = 1;
	required UnixTime timestamp = 2;
}

// softstop.transit
message TransitSoftStop {
	required float timeLeft = 1;
	required bool stop = 2;
	required UnixTime timestamp = 3;
}

// softstop.drill
message DrillSoftStop {
	required float timeLeft = 1;
	required bool stop = 2;
	required UnixTime timestamp = 3;
}

// softstop.dump
message DumpSoftStop {
	required float timeLeft = 1;
	required bool stop = 2;
	required UnixTime timestamp = 3;
}

// hardstop.transit
message TransitHardStop {
	required bool stop = 1;
	required UnixTime timestamp = 2;
}

// hardstop.drill
message DrillHardStop {
	required bool stop = 1;
	required UnixTime timestamp = 2;
}

// hardstop.dump
message DumpHardStop {
	required bool stop = 1;
	required UnixTime timestamp = 2;
}

// newobstable.transit
message TransitNewObstacle {
    required float x_pos = 1;
	required float y_pos = 2;
    required float diameter = 3;
	required UnixTime timestamp = 4;
}
